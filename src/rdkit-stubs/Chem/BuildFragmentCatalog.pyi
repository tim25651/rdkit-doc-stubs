"""
rdkit.Chem.BuildFragmentCatalog module¶
command line utility for working with FragmentCatalogs (CASE-type analysis)
Usage

BuildFragmentCatalog [optional args] <filename>

filename, the name of a delimited text file containing InData, is required
for some modes of operation (see below)

Command Line Arguments

-n maxNumMols:  specify the maximum number of molecules to be processed

-b: build the catalog and OnBitListsrequires InData

-s: score compoundsrequires InData and a Catalog, can use OnBitLists

-g: calculate info gainsrequires Scores

-d: show details about high-ranking fragmentsrequires a Catalog and Gains

–catalog=*filename*: filename with the pickled catalog.If -b is provided, this file will be overwritten.

–onbits=*filename*: filename to hold the pickled OnBitLists.
If -b is provided, this file will be overwritten
–scores=*filename*: filename to hold the text score data.
If -s is provided, this file will be overwritten
–gains=*filename*: filename to hold the text gains data.
If -g is provided, this file will be overwritten
–details=*filename*: filename to hold the text details data.
If -d is provided, this file will be overwritten.
–minPath=2: specify the minimum length for a path
–maxPath=6: specify the maximum length for a path

–smiCol=1: specify which column in the input data file containsSMILES

–actCol=-1: specify which column in the input data file containsactivities

–nActs=2: specify the number of possible activity values
–nBits=-1: specify the maximum number of bits to show details for
"""
import _io
from _typeshed import Incomplete
from rdkit import RDConfig as RDConfig
from rdkit.Chem import FragmentCatalog as FragmentCatalog
from rdkit.Dbase.DbConnection import DbConnect as DbConnect
from rdkit.ML import InfoTheory as InfoTheory

class RunDetails(object):
    actCol: int = ...
    biasList: None = ...
    catalogName: None = ...
    dbName: str = ...
    delim: str = ...
    detailsName: None = ...
    numMols: int = ...
    doBuild: int = ...
    doDetails: int = ...
    doGains: int = ...
    doScore: int = ...
    doSigs: int = ...
    fpName: None = ...
    doScore: int = ...
    doGains: int = ...
    doDetails: int = ...
    catalogName: None = ...
    onBitsName: None = ...
    scoresName: None = ...
    gainsName: None = ...
    hasTitle: int = ...
    dbName: str = ...
    tableName: None = ...
    detailsName: None = ...
    inFileName: None = ...
    maxPath: int = ...
    fpName: None = ...
    minPath: int = ...
    maxPath: int = ...
    smiCol: int = ...
    actCol: int = ...
    nameCol: int = ...
    hasTitle: int = ...
    nActs: int = ...
    nBits: int = ...
    nameCol: int = ...
    numMols: int = ...
    onBitsName: None = ...
    scoresName: None = ...
    smiCol: int = ...
    tableName: None = ...
    delim: str = ...
    biasList: None = ...
    topN: int = ...

def message(self, msg, dest: _io.TextIOWrapper = ...): ...
def BuildCatalog(
    self, suppl, maxPts=-1, groupFileName=None, minPath=2, maxPath=6, reportFreq=10
):
    """
    builds a fragment catalog from a set of molecules in a delimited text block
    Arguments

    suppl: a mol supplier
    maxPts: (optional) if provided, this will set an upper bound on the
    number of points to be considered
    groupFileName: (optional) name of the file containing functional group
    information
    minPath, maxPath: (optional) names of the minimum and maximum path lengths
    to be considered
    reportFreq: (optional) how often to display status information

    Returns

    a FragmentCatalog"""
    ...

def ScoreMolecules(
    self, suppl, catalog, maxPts=-1, actName="", acts=None, nActs=2, reportFreq=10
):
    """
    scores the compounds in a supplier using a catalog
    Arguments

    suppl: a mol supplier
    catalog: the FragmentCatalog
    maxPts: (optional) the maximum number of molecules to be
    considered
    actName: (optional) the name of the molecule’s activity property.
    If this is not provided, the molecule’s last property will be used.
    acts: (optional) a sequence of activity values (integers).
    If not provided, the activities will be read from the molecules.
    nActs: (optional) number of possible activity values
    reportFreq: (optional) how often to display status information

    Returns

    a 2-tuple:

    the results table (a 3D array of ints nBits x 2 x nActs)
    a list containing the on bit lists for each molecule"""
    ...

def ScoreFromLists(
    self,
    bitLists,
    suppl,
    catalog,
    maxPts=-1,
    actName="",
    acts=None,
    nActs=2,
    reportFreq=10,
):
    """
    similar to _ScoreMolecules()_, but uses pre-calculated bit lists
    for the molecules (this speeds things up a lot)
    Arguments

    bitLists: sequence of on bit sequences for the input molecules
    suppl: the input supplier (we read activities from here)
    catalog: the FragmentCatalog
    maxPts: (optional) the maximum number of molecules to be
    considered
    actName: (optional) the name of the molecule’s activity property.
    If this is not provided, the molecule’s last property will be used.
    nActs: (optional) number of possible activity values
    reportFreq: (optional) how often to display status information

    Returns

    the results table (a 3D array of ints nBits x 2 x nActs)"""
    ...

def CalcGains(
    self,
    suppl,
    catalog,
    topN=-1,
    actName="",
    acts=None,
    nActs=2,
    reportFreq=10,
    biasList=None,
    collectFps=0,
):
    """
    calculates info gains by constructing fingerprints
    DOC

    Returns a 2-tuple:
    gains matrix
    list of fingerprints"""
    ...

def CalcGainsFromFps(
    self,
    suppl,
    fps,
    topN=-1,
    actName="",
    acts=None,
    nActs=2,
    reportFreq=10,
    biasList=None,
):
    """
    calculates info gains from a set of fingerprints
    DOC"""
    ...

def OutputGainsData(self, outF, gains, cat, nActs=2): ...
def ParseArgs(self, details): ...
def ProcessGainsData(self, inF, delim=",", idCol=0, gainCol=1):
    """
    reads a list of ids and info gains out of an input file"""
    ...

def ScoreFromLists(
    self,
    bitLists,
    suppl,
    catalog,
    maxPts=-1,
    actName="",
    acts=None,
    nActs=2,
    reportFreq=10,
):
    """
    similar to _ScoreMolecules()_, but uses pre-calculated bit lists
    for the molecules (this speeds things up a lot)
    Arguments

    bitLists: sequence of on bit sequences for the input molecules
    suppl: the input supplier (we read activities from here)
    catalog: the FragmentCatalog
    maxPts: (optional) the maximum number of molecules to be
    considered
    actName: (optional) the name of the molecule’s activity property.
    If this is not provided, the molecule’s last property will be used.
    nActs: (optional) number of possible activity values
    reportFreq: (optional) how often to display status information

    Returns

    the results table (a 3D array of ints nBits x 2 x nActs)"""
    ...

def ScoreMolecules(
    self, suppl, catalog, maxPts=-1, actName="", acts=None, nActs=2, reportFreq=10
):
    """
    scores the compounds in a supplier using a catalog
    Arguments

    suppl: a mol supplier
    catalog: the FragmentCatalog
    maxPts: (optional) the maximum number of molecules to be
    considered
    actName: (optional) the name of the molecule’s activity property.
    If this is not provided, the molecule’s last property will be used.
    acts: (optional) a sequence of activity values (integers).
    If not provided, the activities will be read from the molecules.
    nActs: (optional) number of possible activity values
    reportFreq: (optional) how often to display status information

    Returns

    a 2-tuple:

    the results table (a 3D array of ints nBits x 2 x nActs)
    a list containing the on bit lists for each molecule"""
    ...

def ShowDetails(
    self,
    catalog,
    gains,
    nToDo=-1,
    outF: _io.TextIOWrapper = ...,
    idCol=0,
    gainCol=1,
    outDelim=", ",
):
    """
    gains should be a sequence of sequences.  The idCol entry of each
    sub-sequence should be a catalog ID.  _ProcessGainsData()_ provides
    suitable input."""
    ...

def SupplierFromDetails(self, details): ...
def Usage(self): ...
def message(self, msg, dest: _io.TextIOWrapper = ...): ...

class RunDetails(object):
    actCol: int = ...
    biasList: None = ...
    catalogName: None = ...
    dbName: str = ...
    delim: str = ...
    detailsName: None = ...
    numMols: int = ...
    doBuild: int = ...
    doDetails: int = ...
    doGains: int = ...
    doScore: int = ...
    doSigs: int = ...
    fpName: None = ...
    doScore: int = ...
    doGains: int = ...
    doDetails: int = ...
    catalogName: None = ...
    onBitsName: None = ...
    scoresName: None = ...
    gainsName: None = ...
    hasTitle: int = ...
    dbName: str = ...
    tableName: None = ...
    detailsName: None = ...
    inFileName: None = ...
    maxPath: int = ...
    fpName: None = ...
    minPath: int = ...
    maxPath: int = ...
    smiCol: int = ...
    actCol: int = ...
    nameCol: int = ...
    hasTitle: int = ...
    nActs: int = ...
    nBits: int = ...
    nameCol: int = ...
    numMols: int = ...
    onBitsName: None = ...
    scoresName: None = ...
    smiCol: int = ...
    tableName: None = ...
    delim: str = ...
    biasList: None = ...
    topN: int = ...

def ParseArgs(self, details): ...
