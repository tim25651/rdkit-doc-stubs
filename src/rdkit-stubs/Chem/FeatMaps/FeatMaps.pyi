"""
rdkit.Chem.FeatMaps.FeatMaps moduleÂ¶
"""
from typing import Annotated, Any

from _typeshed import Incomplete
from rdkit.Chem.FeatMaps.FeatMapPoint import FeatMapPoint as FeatMapPoint

class FeatMapScoreMode(object):
    All: Annotated[
        int,
        "score each feature in the probe against every matching\nfeature in the FeatMap.",
    ] = ...
    Best: Annotated[
        int,
        "score each feature in the probe against the matching\nfeature in the FeatMap that leads to the highest score",
    ] = ...
    Closest: Annotated[
        int,
        "score each feature in the probe against the closest\nmatching feature in the FeatMap.",
    ] = ...
    Best: Annotated[
        int,
        "score each feature in the probe against the matching\nfeature in the FeatMap that leads to the highest score",
    ] = ...

class FeatDirScoreMode(object):
    Ignore: Annotated[int, "ignore feature directions"] = ...
    DotFullRange: Annotated[
        int,
        "Use the dot product and allow negative contributions when\ndirections are anti-parallel.\ne.g. score = dot(f1Dir,f2Dir)",
    ] = ...
    DotPosRange: Annotated[
        int,
        "Use the dot product and scale contributions to lie between\nzero and one.\ne.g. score = ( dot(f1Dir,f2Dir) + 1 ) / 2",
    ] = ...
    Ignore: Annotated[int, "ignore feature directions"] = ...

class FeatMap(object):
    dirScoreMode: int = ...
    params: dict[Any, Any] = ...
    scoreMode: int = ...

    def AddFeatPoint(self, featPt): ...
    params: dict[Any, Any] = ...

    def __init__(
        self,
        params: Incomplete | None = ...,
        feats: Incomplete | None = ...,
        weights: Incomplete | None = ...,
    ) -> None: ...
    def AddFeature(self, feat, weight=None): ...
    def DropFeature(self, i): ...
    def GetFeatFeatScore(self, feat1, feat2, typeMatch=True):
        """
        feat1 is one of our feats
        feat2 is any Feature"""
        ...
    def GetFeature(self, i): ...
    def AddFeatPoint(self, featPt): ...
    def GetFeatures(self): ...
    def GetNumFeatures(self): ...
    def GetFeature(self, i): ...
    def DropFeature(self, i): ...
    def GetFeatFeatScore(self, feat1, feat2, typeMatch=True):
        """
        feat1 is one of our feats
        feat2 is any Feature"""
        ...
    def ScoreFeats(
        self,
        featsToScore,
        mapScoreVect=None,
        featsScoreVect=None,
        featsToFeatMapIdx=None,
    ): ...

class FeatMapParams(object):
    """
    one of these should be instantiated for each
    feature type in the feature map"""

    featProfile: int = ...
    radius: Annotated[float, "cutoff radius"] = ...
    width: Annotated[float, "width parameter (e.g. the gaussian sigma)"] = ...

    class FeatProfile(object):
        """
        scoring profile of the feature
        """

        Box: int = ...
        Gaussian: int = ...
        Triangle: int = ...
        Box: int = ...
    featProfile: int = ...

class FeatMapScoreMode(object):
    All: Annotated[
        int,
        "score each feature in the probe against every matching\nfeature in the FeatMap.",
    ] = ...
    Best: Annotated[
        int,
        "score each feature in the probe against the matching\nfeature in the FeatMap that leads to the highest score",
    ] = ...
    Closest: Annotated[
        int,
        "score each feature in the probe against the closest\nmatching feature in the FeatMap.",
    ] = ...
    Best: Annotated[
        int,
        "score each feature in the probe against the matching\nfeature in the FeatMap that leads to the highest score",
    ] = ...

class FeatMap(object):
    dirScoreMode: int = ...
    params: dict[Any, Any] = ...
    scoreMode: int = ...

    def AddFeatPoint(self, featPt): ...
    params: dict[Any, Any] = ...

    def __init__(
        self,
        params: Incomplete | None = ...,
        feats: Incomplete | None = ...,
        weights: Incomplete | None = ...,
    ) -> None: ...
    def AddFeature(self, feat, weight=None): ...
    def DropFeature(self, i): ...
    def GetFeatFeatScore(self, feat1, feat2, typeMatch=True):
        """
        feat1 is one of our feats
        feat2 is any Feature"""
        ...
    def GetFeature(self, i): ...
    def AddFeatPoint(self, featPt): ...
    def GetFeatures(self): ...
    def GetNumFeatures(self): ...
    def GetFeature(self, i): ...
    def DropFeature(self, i): ...
    def GetFeatFeatScore(self, feat1, feat2, typeMatch=True):
        """
        feat1 is one of our feats
        feat2 is any Feature"""
        ...
    def ScoreFeats(
        self,
        featsToScore,
        mapScoreVect=None,
        featsScoreVect=None,
        featsToFeatMapIdx=None,
    ): ...
