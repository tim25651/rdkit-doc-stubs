"""
rdkit.Chem.Subshape.SubshapeBuilder moduleÂ¶
"""
from _typeshed import Incomplete
from rdkit import Chem as Chem
from rdkit import Geometry as Geometry
from rdkit.Chem import AllChem as AllChem
from rdkit.Chem.Subshape import BuilderUtils as BuilderUtils
from rdkit.Chem.Subshape import SubshapeObjects as SubshapeObjects

class SubshapeBuilder(object):
    featFactory: None = ...
    fraction: float = ...
    gridDims: tuple[int] = ...
    gridSpacing: float = ...
    winRad: float = ...
    nbrCount: int = ...
    stepSize: float = ...
    terminalPtRadScale: float = ...
    winRad: float = ...

    def CombineSubshapes(self, subshape1, subshape2, operation=0): ...
    fraction: float = ...
    stepSize: float = ...
    featFactory: None = ...

    def SampleSubshape(self, subshape1, newSpacing): ...
    def GenerateSubshapeShape(self, cmpd, confId=-1, addSkeleton=True, **kwargs): ...
    def __call__(self, cmpd, **kwargs): ...
    def GenerateSubshapeSkeleton(
        self, shape, conf=None, terminalPtsOnly=False, skelFromConf=True
    ): ...
    def SampleSubshape(self, subshape1, newSpacing): ...
    def CombineSubshapes(self, subshape1, subshape2, operation=0): ...

class SubshapeCombineOperations(object):
    INTERSECT: int = ...
    SUM: int = ...
    UNION: int = ...
    SUM: int = ...
    INTERSECT: int = ...

class SubshapeBuilder(object):
    featFactory: None = ...
    fraction: float = ...
    gridDims: tuple[int] = ...
    gridSpacing: float = ...
    winRad: float = ...
    nbrCount: int = ...
    stepSize: float = ...
    terminalPtRadScale: float = ...
    winRad: float = ...

    def CombineSubshapes(self, subshape1, subshape2, operation=0): ...
    fraction: float = ...
    stepSize: float = ...
    featFactory: None = ...

    def SampleSubshape(self, subshape1, newSpacing): ...
    def GenerateSubshapeShape(self, cmpd, confId=-1, addSkeleton=True, **kwargs): ...
    def __call__(self, cmpd, **kwargs): ...
    def GenerateSubshapeSkeleton(
        self, shape, conf=None, terminalPtsOnly=False, skelFromConf=True
    ): ...
    def SampleSubshape(self, subshape1, newSpacing): ...
    def CombineSubshapes(self, subshape1, subshape2, operation=0): ...
