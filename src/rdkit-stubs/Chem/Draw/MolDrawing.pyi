"""
rdkit.Chem.Draw.MolDrawing module¶
"""
from _typeshed import Incomplete
from rdkit import Chem as Chem

class DrawingOptions(object):
    atomLabelDeuteriumTritium: bool = ...
    dotsPerAngstrom: int = ...
    useFraction: float = ...
    atomLabelFontFace: str = ...
    atomLabelFontSize: int = ...
    atomLabelMinFontSize: int = ...
    atomNumberOffset: int = ...
    bgColor: tuple[int] = ...
    atomLabelDeuteriumTritium: bool = ...
    bondLineWidth: float = ...
    colorBonds: bool = ...
    coordScale: float = ...
    dash: tuple[int] = ...
    dblBondLengthFrac: float = ...
    dblBondOffset: float = ...
    dblBondLengthFrac: float = ...
    defaultColor: tuple[int] = ...
    dotsPerAngstrom: int = ...
    elemDict: dict[int, tuple[float]] = ...
    includeAtomNumbers: bool = ...
    selectColor: tuple[int] = ...
    bgColor: tuple[int] = ...
    colorBonds: bool = ...
    noCarbonSymbols: bool = ...
    includeAtomNumbers: bool = ...
    atomNumberOffset: int = ...
    radicalSymbol: str = ...
    selectColor: tuple[int] = ...
    showUnknownDoubleBonds: bool = ...
    useFraction: float = ...
    dash: tuple[int] = ...
    wedgeDashedBonds: bool = ...
    showUnknownDoubleBonds: bool = ...
    coordScale: float = ...
    elemDict: dict[int, tuple[float]] = ...

def cmp(self, t1, t2): ...

periodicTable: Incomplete

class Font(object):
    ...
    face: Incomplete
    size: Incomplete
    weight: Incomplete
    name: Incomplete

    def __init__(
        self,
        face: Incomplete | None = ...,
        size: Incomplete | None = ...,
        name: Incomplete | None = ...,
        weight: Incomplete | None = ...,
    ) -> None: ...

class DrawingOptions(object):
    atomLabelDeuteriumTritium: bool = ...
    dotsPerAngstrom: int = ...
    useFraction: float = ...
    atomLabelFontFace: str = ...
    atomLabelFontSize: int = ...
    atomLabelMinFontSize: int = ...
    atomNumberOffset: int = ...
    bgColor: tuple[int] = ...
    atomLabelDeuteriumTritium: bool = ...
    bondLineWidth: float = ...
    colorBonds: bool = ...
    coordScale: float = ...
    dash: tuple[int] = ...
    dblBondLengthFrac: float = ...
    dblBondOffset: float = ...
    dblBondLengthFrac: float = ...
    defaultColor: tuple[int] = ...
    dotsPerAngstrom: int = ...
    elemDict: dict[int, tuple[float]] = ...
    includeAtomNumbers: bool = ...
    selectColor: tuple[int] = ...
    bgColor: tuple[int] = ...
    colorBonds: bool = ...
    noCarbonSymbols: bool = ...
    includeAtomNumbers: bool = ...
    atomNumberOffset: int = ...
    radicalSymbol: str = ...
    selectColor: tuple[int] = ...
    showUnknownDoubleBonds: bool = ...
    useFraction: float = ...
    dash: tuple[int] = ...
    wedgeDashedBonds: bool = ...
    showUnknownDoubleBonds: bool = ...
    coordScale: float = ...
    elemDict: dict[int, tuple[float]] = ...

class MolDrawing(object):
    def AddMol(
        self,
        mol,
        centerIt=True,
        molTrans=None,
        drawingTrans=None,
        highlightAtoms=[],
        confId=-1,
        flagCloseContactsDist=2,
        highlightMap=None,
        ignoreHs=False,
        highlightBonds=[],
        **kwargs,
    ):
        """
        Set the molecule to be drawn.

        Parameters:hightlightAtoms – list of atoms to highlight (default [])
        highlightMap – dictionary of (atom, color) pairs (default None)

        Notes:
        specifying centerIt will cause molTrans and drawingTrans to be ignored"""
        ...
    def scaleAndCenter(
        self, mol, conf, coordCenter=False, canvasSize=None, ignoreHs=False
    ): ...
    canvas: Incomplete
    canvasSize: Incomplete
    drawingOptions: Incomplete
    atomPs: Incomplete
    boundingBoxes: Incomplete

    def __init__(
        self, canvas: Incomplete | None = ..., drawingOptions: Incomplete | None = ...
    ) -> None: ...
    def transformPoint(self, pos): ...
    molTrans: Incomplete
    currAtomLabelFontSize: Incomplete
    drawingTrans: Incomplete

    def scaleAndCenter(
        self, mol, conf, coordCenter=False, canvasSize=None, ignoreHs=False
    ): ...
    currDotsPerAngstrom: Incomplete
    activeMol: Incomplete
    bondRings: Incomplete

    def AddMol(
        self,
        mol,
        centerIt=True,
        molTrans=None,
        drawingTrans=None,
        highlightAtoms=[],
        confId=-1,
        flagCloseContactsDist=2,
        highlightMap=None,
        ignoreHs=False,
        highlightBonds=[],
        **kwargs,
    ):
        """
        Set the molecule to be drawn.

        Parameters:hightlightAtoms – list of atoms to highlight (default [])
        highlightMap – dictionary of (atom, color) pairs (default None)

        Notes:
        specifying centerIt will cause molTrans and drawingTrans to be ignored"""
        ...

def cmp(self, t1, t2): ...
