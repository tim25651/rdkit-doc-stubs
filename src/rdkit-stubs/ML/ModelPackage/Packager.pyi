"""
rdkit.ML.ModelPackage.Packager moduleÂ¶
"""
from _typeshed import Incomplete

class ModelPackage(object):
    """
    a container class to package a composite model with a descriptor
    calculator so that objects needing predictions (compounds, molecules, etc.)
    can be passed directly in without worrying about generating descriptors"""

    def AddSupplementalData(self, data): ...
    def Classify(self, obj, label="", threshold=0): ...
    def __init__(
        self,
        descCalc: Incomplete | None = ...,
        model: Incomplete | None = ...,
        dataSet: Incomplete | None = ...,
        notes: str = ...,
    ) -> None: ...
    def SetCalculator(self, calc): ...
    def GetCalculator(self): ...
    def GetDataset(self): ...
    def SetModel(self, model): ...
    def GetModel(self): ...
    def GetNotes(self): ...
    def GetSupplementalData(self): ...
    def Init(self): ...
    def SetCalculator(self, calc): ...
    def SetDataset(self, data): ...
    def SetModel(self, model): ...
    def GetDataset(self): ...
    def SetNotes(self, notes): ...
    def GetNotes(self): ...
    def SetSupplementalData(self, suppD): ...
    def GetSupplementalData(self): ...
    def AddSupplementalData(self, data): ...
    def Classify(self, obj, label="", threshold=0): ...
    def Init(self): ...

class ClassificationError(Exception):
    """
    used to signal problems generating predictions"""

    ...
    ...

class DescriptorCalculationError(Exception):
    """
    used to signal problems generating descriptor values"""

    ...
    ...

class ClassificationError(Exception):
    """
    used to signal problems generating predictions"""

    ...
    ...

class ModelPackage(object):
    """
    a container class to package a composite model with a descriptor
    calculator so that objects needing predictions (compounds, molecules, etc.)
    can be passed directly in without worrying about generating descriptors"""

    def AddSupplementalData(self, data): ...
    def Classify(self, obj, label="", threshold=0): ...
    def __init__(
        self,
        descCalc: Incomplete | None = ...,
        model: Incomplete | None = ...,
        dataSet: Incomplete | None = ...,
        notes: str = ...,
    ) -> None: ...
    def SetCalculator(self, calc): ...
    def GetCalculator(self): ...
    def GetDataset(self): ...
    def SetModel(self, model): ...
    def GetModel(self): ...
    def GetNotes(self): ...
    def GetSupplementalData(self): ...
    def Init(self): ...
    def SetCalculator(self, calc): ...
    def SetDataset(self, data): ...
    def SetModel(self, model): ...
    def GetDataset(self): ...
    def SetNotes(self, notes): ...
    def GetNotes(self): ...
    def SetSupplementalData(self, suppD): ...
    def GetSupplementalData(self): ...
    def AddSupplementalData(self, data): ...
    def Classify(self, obj, label="", threshold=0): ...
    def Init(self): ...
