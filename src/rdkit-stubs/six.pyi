"""
rdkit.six moduleÂ¶
Utilities for writing code that runs on Python 2 and 3
"""
from typing import Any, ModuleType

class Module_six_moves_urllib(module):
    """
    Create a six.moves.urllib namespace that resembles the Python 3 namespace"""

    error: ModuleType = ...
    parse: ModuleType = ...
    request: ModuleType = ...
    response: ModuleType = ...
    robotparser: ModuleType = ...

class Module_six_moves_urllib_error(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_error"""

    ContentTooShortError: Any = ...
    HTTPError: Any = ...
    URLError: Any = ...

class Module_six_moves_urllib_parse(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_parse"""

    ParseResult: Any = ...
    SplitResult: Any = ...
    parse_qs: Any = ...
    parse_qsl: Any = ...
    quote: Any = ...
    quote_plus: Any = ...
    splitquery: Any = ...
    unquote: Any = ...
    unquote_plus: Any = ...
    urldefrag: Any = ...
    urlencode: Any = ...
    urljoin: Any = ...
    urlparse: Any = ...
    urlsplit: Any = ...
    urlunparse: Any = ...
    urlunsplit: Any = ...

class Module_six_moves_urllib_request(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_request"""

    AbstractBasicAuthHandler: Any = ...
    AbstractDigestAuthHandler: Any = ...
    BaseHandler: Any = ...
    CacheFTPHandler: Any = ...
    FTPHandler: Any = ...
    FancyURLopener: Any = ...
    FileHandler: Any = ...
    HTTPBasicAuthHandler: Any = ...
    HTTPCookieProcessor: Any = ...
    HTTPDefaultErrorHandler: Any = ...
    HTTPDigestAuthHandler: Any = ...
    HTTPErrorProcessor: Any = ...
    HTTPHandler: Any = ...
    HTTPPasswordMgr: Any = ...
    HTTPPasswordMgrWithDefaultRealm: Any = ...
    HTTPRedirectHandler: Any = ...
    HTTPSHandler: Any = ...
    OpenerDirector: Any = ...
    ProxyBasicAuthHandler: Any = ...
    ProxyDigestAuthHandler: Any = ...
    ProxyHandler: Any = ...
    Request: Any = ...
    URLopener: Any = ...
    UnknownHandler: Any = ...
    build_opener: Any = ...
    getproxies: Any = ...
    install_opener: Any = ...
    pathname2url: Any = ...
    proxy_bypass: Any = ...
    url2pathname: Any = ...
    urlcleanup: Any = ...
    urlopen: Any = ...
    urlretrieve: Any = ...

class Module_six_moves_urllib_response(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_response"""

    addbase: Any = ...
    addclosehook: Any = ...
    addinfo: Any = ...
    addinfourl: Any = ...

class Module_six_moves_urllib_robotparser(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_robotparser"""

    RobotFileParser: Any = ...

class MovedAttribute(_LazyDescr): ...
class MovedModule(_LazyDescr): ...

def add_metaclass(self, metaclass):
    """
    Class decorator for creating a class with a metaclass."""
    ...

def add_move(self, move):
    """
    Add an item to six.moves."""
    ...

def b(self, s):
    """
    Byte literal"""
    ...

def cmp(self, t1, t2): ...
def get_unbound_function(self, unbound):
    """
    Get the function out of a possibly unbound function"""
    ...

def iteritems(self, d, **kw):
    """
    Return an iterator over the (key, value) pairs of a dictionary."""
    ...

def iterkeys(self, d, **kw):
    """
    Return an iterator over the keys of a dictionary."""
    ...

def iterlists(self, d, **kw):
    """
    Return an iterator over the (key, [values]) pairs of a dictionary."""
    ...

def itervalues(self, d, **kw):
    """
    Return an iterator over the values of a dictionary."""
    ...

def remove_move(self, name):
    """
    Remove item from six.moves."""
    ...

def reraise(self, tp, value, tb=None):
    """
    Reraise an exception."""
    ...

def u(self, s):
    """
    Text literal"""
    ...

def with_metaclass(self, meta, *bases):
    """
    Create a base class with a metaclass."""
    ...
